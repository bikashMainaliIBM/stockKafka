# Configuration file
# key = value
# Logging
quarkus.log.console.enable=true
quarkus.log.console.format=%d{HH:mm:ss} %-5p [%c{2.}] (%t) %s%e%n
quarkus.log.console.level=DEBUG
quarkus.log.console.color=true
quarkus.http.port=8082


mp.messaging.outgoing.stock-data-outgoing.connector=smallrye-kafka
mp.messaging.outgoing.stock-data-outgoing.topic=Stock-Data
mp.messaging.outgoing.stock-data-outgoing.key.serializer=org.apache.kafka.common.serialization.StringSerializer
mp.messaging.outgoing.stock-data-outgoing.value.serializer=org.apache.kafka.common.serialization.StringSerializer

mp.messaging.incoming.stock-data-incoming.connector=smallrye-kafka
mp.messaging.incoming.stock-data-incoming.topic=Stock-Data
mp.messaging.incoming.stock-data-incoming.key.serializer=org.apache.kafka.common.serialization.StringSerializer
mp.messaging.incoming.stock-data-incoming.value.serializer=org.apache.kafka.common.serialization.StringSerializer
mp.messaging.incoming.stock-data-incoming.value.deserializer=org.apache.kafka.common.serialization.StringDeserializer

mp.messaging.incoming.stock-data-incoming.auto.offset.reset=earliest
mp.messaging.incoming.stock-data-incoming.group.id=complianceChecker

#### Config shared between all kafka connections
# bootstrap server is the only config needed for plain insercure local kafka instance
mp.messaging.connector.smallrye-kafka.bootstrap.servers=icp-proxy.cpat-dev-cp4i-us-intern-afb9c6047b062b44e3f1b3ecfeba4309-0001.sjc03.containers.appdomain.cloud:30156
# If connecting to Event Streams on IBM Cloud or to any Kafka deployment with SSL security
mp.messaging.connector.smallrye-kafka.security.protocol=SASL_SSL
mp.messaging.connector.smallrye-kafka.ssl.protocol=TLSv1.2
mp.messaging.connector.smallrye-kafka.sasl.mechanism=PLAIN
# Make sure you set the username and API key at the end
mp.messaging.connector.smallrye-kafka.sasl.jaas.config=org.apache.kafka.common.security.plain.PlainLoginModule required username="token" password="UgREJZAEQGjhJRhMFmOQ-x-4lvmXaYQX5px1Z_EouKZl";

# If connecting to Event Streams in OpenShift that requires certificates
# Location for the truststore within the container
#change to es-cert.jks folder] full path
mp.messaging.connector.smallrye-kafka.ssl.truststore.location=/Users/bikashmainali/Desktop/StockKafka/stockDataGenerator/src/main/resources/keystore/es-cert.jks
# Password for the truststore
mp.messaging.connector.smallrye-kafka.ssl.truststore.password=password


# for incoming message 
kafka.topic=stock-data